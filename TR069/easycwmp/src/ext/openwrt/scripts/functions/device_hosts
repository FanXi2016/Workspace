#!/bin/sh

get_device_hosts_number_of_leases() {
	local _static=`$UCI_SHOW dhcp 2> /dev/null | fgrep 'dhcp.' | fgrep '.mac=' | wc -l`
	local _dhcp_num=`wc -l /var/dhcp.leases  | awk '{ print $1 }'`
	local _eth_num=`$UCI_SHOW lanhost|grep "lan"|grep ipaddr|wc -l`
	local _dynamic

	case $_eth_num in
		0)
			_dynamic=$_dhcp_num
			;;
		1)
			local eth_ip=`$UCI_GET lanhost.@lan[0].ipaddr 2>/dev/null`
			grep $eth_ip /var/dhcp.leases >/dev/null
			if [ $? -eq 0 ];then
				_dynamic=$_dhcp_num
			else
				let _dynamic=$_dhcp_num+1
			fi
			;;
		2)
			local eth_ip1=`$UCI_GET lanhost.@lan[0].ipaddr 2>/dev/null`
			local eth_ip2=`$UCI_GET lanhost.@lan[1].ipaddr 2>/dev/null`
			grep $eth_ip1 /var/dhcp.leases >/dev/null
			if [ $? -eq 0 ];then
				_dynamic=$_dhcp_num
			else
				grep $eth_ip2 /var/dhcp.leases >/dev/null
				if [ $? -eq 0 ];then
					let _dynamic=$_dhcp_num+1
				else
					let _dynamic=$_dhcp_num+2
				fi
			fi
			;;
	esac

	eval "export -- \"$1=\"\"$_dhcp_num\"\"\""
	eval "export -- \"$2=\"\"$_static\"\"\""
	eval "export -- \"$3=\"\"$_dynamic\"\"\""
}

get_device_hosts_eth_ip_addr() {
	let local eth_num=$1-1
	eth_ip=`$UCI_GET lanhost.@lan[$eth_num].ipaddr 2>/dev/null`
	eval "export -- \"$2=\"\"$eth_ip\"\"\""
}

get_device_hosts_eth_ip_mac() {
	let local eth_num=$1-1
	eth_mac=`$UCI_GET lanhost.@lan[$eth_num].macaddr 2>/dev/null`
	eval "export -- \"$2=\"\"$eth_mac\"\"\""
}

get_device_hosts_ip_address() {
	local _leases_file=$1
	local _num=$2
	local _num_static_leases=$3
	local _num_dynamic_leases=$4
	local _ip

	if [ $_num -le $_num_static_leases ]; then
		let local _uci_num=$_num-1
		_ip=`$UCI_GET dhcp.@host[$_uci_num].ip 2> /dev/null`
	fi

	let _num=$_num-$_num_static_leases
	if [ $_num -gt 0 -a $_num -le $_num_dynamic_leases ]; then
		local _sed_cmd=`echo -n \'$_num; echo p\'`
		_ip=`eval sed -n $_sed_cmd $_leases_file | awk '{ print $3 }'`
	fi
	eval "export -- \"$5=\"\"$_ip\"\"\""
}


get_lan_hosts_MACAddress() {
	local parm="InternetGatewayDevice.LANDevice.1.Hosts.Host.$1.MACAddress"
	local leases_file
	local num_dhcp
	local num_static_leases
	local num_dynamic_leases
	local val
	local permissions="0"
	local type="xsd:string"

	if [ -z "$default_dnsmasq_leases_file" ]; then
		leases_file="/var/dhcp.leases"
	else
		leases_file=$default_dnsmasq_leases_file
	fi

	case "$action" in
		get_value)
			get_device_hosts_number_of_leases "num_dhcp" "num_static_leases" "num_dynamic_leases"
			if [ $1 -le $num_static_leases ]; then
				let local uci_num=$1-1
				val=`$UCI_GET dhcp.@host[$uci_num].mac 2> /dev/null`
			fi

			let num=$1-$num_static_leases
			if [ $num -gt 0 -a $num -le $num_dhcp ]; then
				val=`cat $leases_file |awk "NR==$num"'{print $2}'`
			elif [ $num -gt $num_dhcp -a $num -le $num_dynamic_leases ];then
				let local lack_num=$num_dynamic_leases-$num_dhcp
				[ $lack_num -eq 1 ] && val=`$UCI_GET lanhost.@lan[0].macaddr 2>/dev/null`
				[ $lack_num -eq 2 ] && val=`$UCI_GET lanhost.@lan[1].macaddr 2>/dev/null`
			else
				return $E_INVALID_ARGUMENTS
			fi
			;;

		get_name)
			[ "$nl" = "1" ] && return $E_INVALID_ARGUMENTS
			;;

		get_notification)
			easycwmp_get_parameter_notification "val" "$parm"
			;;
	esac

	easycwmp_output "$parm" "$val" "$permissions" "$type"
}

get_lan_hosts_IPAddress() {
	local parm="InternetGatewayDevice.LANDevice.1.Hosts.Host.$1.IPAddress"
	local leases_file
	local num_static_leases
	local num_dynamic_leases
	local val
	local permissions="0"
	local type="xsd:string"

	if [ -z "$default_dnsmasq_leases_file" ]; then
		leases_file="/var/dhcp.leases"
	else
		leases_file=$default_dnsmasq_leases_file
	fi

	case "$action" in
		get_value)
		#	get_device_hosts_number_of_leases "$leases_file" "num_static_leases" "num_dynamic_leases"
		#	# get_device_hosts_ip_address "$leases_file" "$1" "$num_static_leases" "$num_dynamic_leases" "val"
		#	if [ $1 -le $num_static_leases ]; then
		#		let local uci_num=$1-1
		#		val=`$UCI_GET dhcp.@host[$uci_num].ipaddr 2> /dev/null`
		#	fi

		#	let num=$1-$num_static_leases
		#	if [ $num -gt 0 -a $num -le $num_dynamic_leases ]; then
		#	#	local sed_cmd=`echo -n \'$num; echo p\'`
		#	#	val=`eval sed -n $sed_cmd $leases_file | awk '{ print $3 }'`
		#		val=`cat $leases_file |awk "NR==$num"'{print $3}'`
		#	elif [ $num -gt 0 -a $num_dynamic_leases -eq 0 ];then
		#		get_device_hosts_eth_ip_addr "$num" "val"
		#	else
		#		return $E_INVALID_ARGUMENTS
		#	fi

			get_device_hosts_number_of_leases "num_dhcp" "num_static_leases" "num_dynamic_leases"
			if [ $1 -le $num_static_leases ]; then
				let local uci_num=$1-1
				val=`$UCI_GET dhcp.@host[$uci_num].ipaddr 2> /dev/null`
			fi

			let num=$1-$num_static_leases
			if [ $num -gt 0 -a $num -le $num_dhcp ]; then
				val=`cat $leases_file |awk "NR==$num"'{print $3}'`
			elif [ $num -gt $num_dhcp -a $num -le $num_dynamic_leases ];then
				let local lack_num=$num_dynamic_leases-$num_dhcp
				[ $lack_num -eq 1 ] && val=`$UCI_GET lanhost.@lan[0].ipaddr 2>/dev/null`
				[ $lack_num -eq 2 ] && val=`$UCI_GET lanhost.@lan[1].ipaddr 2>/dev/null`
			else
				return $E_INVALID_ARGUMENTS
			fi
			;;

		get_name)
			[ "$nl" = "1" ] && return $E_INVALID_ARGUMENTS
			;;

		get_notification)
			easycwmp_get_parameter_notification "val" "$parm"
			;;
    esac

	easycwmp_output "$parm" "$val" "$permissions" "$type"
}



get_lan_hosts_AddressSource() {
	local parm="InternetGatewayDevice.LANDevice.1.Hosts.Host.$1.AddressSource"
	local leases_file
	local num_static_leases
	local num_dynamic_leases
	local permissions="0"
	local type="xsd:string"
	local val

	if [ -z "$default_dnsmasq_leases_file" ]; then
		leases_file="/var/dhcp.leases"
	else
		leases_file=$default_dnsmasq_leases_file
	fi

	case "$action" in
	get_value)
		get_device_hosts_number_of_leases "num_dhcp" "num_static_leases" "num_dynamic_leases"
		if [ $1 -le $num_static_leases ]; then
			val="Static"
		fi

		let num=$1-$num_static_leases
		if [ $num -gt 0 -a $num -le $num_dynamic_leases ]; then
			val="DHCP"
#		elif [ $num -gt 0 -a $num_dynamic_leases -eq 0 ];then
#			val="DHCP"
		else
			return $E_INVALID_ARGUMENTS
		fi
	    ;;

	get_name)
		[ "$nl" = "1" ] && return $E_INVALID_ARGUMENTS
		;;

	get_notification)
		easycwmp_get_parameter_notification "val" "$parm"
		;;
	esac

	easycwmp_output "$parm" "$val" "$permissions" "$type"
}

get_lan_hosts_LeaseTimeRemaining() {
	local parm="InternetGatewayDevice.LANDevice.1.Hosts.Host.$1.LeaseTimeRemaining"
	local val
	local leases_file
	local num_static_leases
	local num_dynamic_leases
	local permissions="0"
	local type="xsd:int"
	local val

	if [ -z "$default_dnsmasq_leases_file" ]; then
		leases_file="/var/dhcp.leases"
	else
		leases_file=$default_dnsmasq_leases_file
	fi

	case "$action" in
		get_value)
			get_device_hosts_number_of_leases "num_dhcp" "num_static_leases" "num_dynamic_leases"
			if [ $1 -le $num_static_leases ]; then
				val="0"
			fi
			let num=$1-$num_static_leases
			if [ $num -gt 0 -a $num -le $num_dhcp ]; then
				local sed_cmd=`echo -n \'$num; echo p\'`
				local t1=`eval sed -n $sed_cmd $leases_file | awk '{ print $1 }'`
				local t2=`date +%s`
				let val=$t1-$t2
				if [ $val -lt -1 ]; then
					val=-1
				fi
			elif [ $num -gt $num_dhcp -a $num -le $num_dynamic_leases ];then
				val="-1"
			else
				return $E_INVALID_ARGUMENTS
			fi
			;;

		get_name)
			[ "$nl" = "1" ] && return $E_INVALID_ARGUMENTS
			;;

		get_notification)
			easycwmp_get_parameter_notification "val" "$parm"
			;;
	esac

	easycwmp_output "$parm" "$val" "$permissions" "$type"
}

get_lan_hosts_HostName() {
	local parm="InternetGatewayDevice.LANDevice.1.Hosts.Host.$1.HostName"
	local val
	local leases_file
	local num_static_leases
	local num_dynamic_leases
	local permissions="0"
	local type="xsd:string"
	local val

	if [ -z "$default_dnsmasq_leases_file" ]; then
		leases_file="/var/dhcp.leases"
	else
		leases_file=$default_dnsmasq_leases_file
	fi

	case "$action" in
		get_value)
			get_device_hosts_number_of_leases "num_dhcp" "num_static_leases" "num_dynamic_leases"
			if [ $1 -le $num_static_leases ]; then
				let local uci_num=$1-1
				val=`$UCI_GET dhcp.@host[$uci_num].name 2> /dev/null`
			fi

			let num=$1-$num_static_leases
			if [ $num -gt 0 -a $num -le $num_dhcp ]; then
				local sed_cmd=`echo -n \'$num; echo p\'`
				val=`eval sed -n $sed_cmd $leases_file | awk '{ print $4 }'`
				if [ "x$val" == "x*" ]; then val=""; fi
			elif [ $num -gt $num_dhcp -a $num -le $num_dynamic_leases ];then
				val=""
			else
				return $E_INVALID_ARGUMENTS
			fi
			;;

		get_name)
			[ "$nl" = "1" ] && return $E_INVALID_ARGUMENTS
			;;

		get_notification)
			easycwmp_get_parameter_notification "val" "$parm"
			;;
	esac
	easycwmp_output "$parm" "$val" "$permissions" "$type"
}

get_lan_hosts_InterfaceType() {
	local parm="InternetGatewayDevice.LANDevice.1.Hosts.Host.$1.InterfaceType"
	local val=""
	local leases_file
	local num_static_leases
	local num_dynamic_leases
	local permissions="0"

	if [ -z "$default_dnsmasq_leases_file" ]; then
		leases_file="/var/dhcp.leases"
	else
		leases_file=$default_dnsmasq_leases_file
	fi

	case "$action" in
		get_value)
			get_device_hosts_number_of_leases "num_dhcp" "num_static_leases" "num_dynamic_leases"
			# get_device_hosts_ip_address "$leases_file" "$1" "$num_static_leases" "$num_dynamic_leases" "ip"
			if [ $1 -le $num_static_leases ]; then
				val="Ethernet"
			fi

			let num=$1-$num_static_leases
			if [ $num -gt 0 -a $num -le $num_dhcp ]; then
				local eth_ip1=`$UCI_GET lanhost.@lan[0].ipaddr 2>/dev/null`
				local eth_ip2=`$UCI_GET lanhost.@lan[1].ipaddr 2>/dev/null`
				local dhcp_ip=`cat $leases_file |awk "NR==$num"'{print $3}'`
				if [ "$dhcp_ip" = "$eth_ip1" -o "$dhcp_ip" = "$eth_ip2" ];then
					val="Ethernet"
				else
					val="802.11"
				fi
			elif [ $num -gt $num_dhcp -a $num -le $num_dynamic_leases ];then
				val="Ethernet"
			else
				return $E_INVALID_ARGUMENTS
			fi

		#	local sed_cmd=`echo -n \'$num; echo p\'`
		#	local dhcp_mac=`eval sed -n $sed_cmd $leases_file | awk '{ print $2 }'`
		#	local wifi_mac_list=`iw dev wlan0 station dump|grep Station|awk '{print $2}'`
		#	for wifi_mac in $wifi_mac_list;do
		#		if [ "$dhcp_mac" = "$wifi_mac" ];then
		#			val="802.11"
		#			break
		#		fi
		#	done
		#	[ "$val" != "802.11" ] && val="Ethernet"
		    ;;

		get_name)
			[ "$nl" = "1" ] && return $E_INVALID_ARGUMENTS
   			;;

		get_notification)
			easycwmp_get_parameter_notification "val" "$parm"
			;;
	esac

	easycwmp_output "$parm" "$val" "$permissions" "$type"
}

get_lan_hosts_Active() {
	local parm="InternetGatewayDevice.LANDevice.1.Hosts.Host.$1.Active"
	local val
	local ip
	local leases_file
	local num_static_leases
	local num_dynamic_leases
	local permissions="0"
	local type="xsd:boolean"

	if [ -z "$default_dnsmasq_leases_file" ]; then
		leases_file="/var/dhcp.leases"
	else
		leases_file=$default_dnsmasq_leases_file
	fi

	case "$action" in
		get_value)
			get_device_hosts_number_of_leases "num_dhcp" "num_static_leases" "num_dynamic_leases"
			if [ $1 -le $num_static_leases ]; then
				let local uci_num=$1-1
				ip=`$UCI_GET dhcp.@host[$uci_num].ipaddr 2> /dev/null`
				val=`ping -c 1 $ip 2>&1 > /dev/null ; echo $?`
				if [ $val -eq 0 ];then
					val="true"
				else
					val="false"
				fi
			fi

			let num=$1-$num_static_leases
			if [ $num -gt 0 -a $num -le $num_dhcp ]; then
				ip=`cat $leases_file |awk "NR==$num"'{print $3}'`
			elif [ $num -gt $num_dhcp -a $num -le $num_dynamic_leases ];then
				let local lack_num=$num_dynamic_leases-$num_dhcp
				if [ $lack_num -eq 1 ];then
					 ip=`$UCI_GET lanhost.@lan[0].ipaddr 2>/dev/null`
				elif [ $lack_num -eq 2 ];then
					 ip=`$UCI_GET lanhost.@lan[1].ipaddr 2>/dev/null`
				fi
			else
				return $E_INVALID_ARGUMENTS
			fi
			val=`ping -c 1 $ip 2>&1 > /dev/null ; echo $?`
			if [ $val -eq 0 ];then
				val="true"
			else
				val="false"
			fi
		    ;;

		get_name)
			[ "$nl" = "1" ] && return $E_INVALID_ARGUMENTS
   			;;

		get_notification)
			easycwmp_get_parameter_notification "val" "$parm"
			;;
	esac

	easycwmp_output "$parm" "$val" "$permissions" "$type"
}

get_lan_hosts_wire_portstatus() {
	local var
	local lan_device_up
	local num=0
	local port1
	local port2

	lan_device_up=`swconfig dev switch0 show| grep -E port\:1\|port\:2|grep "up"`
	if [ -z "$lan_device_up" ];then
		var="down"
	else
		local num=`echo $lan_device_up |wc -l`
		if [ $num -eq 2 ];then
			port1=`echo $lan_device_up |head -1`
			port2=`echo $lan_device_up |tail -1`
		elif [ $num -eq 1 ];then
			port1=$lan_device_up
		fi
	fi
	eval "export -- \"$1=\"\"$num\"\"\""
	eval "export -- \"$2=\"\"$port1\"\"\""
	eval "export -- \"$3=\"\"$port2\"\"\""
}

get_lan_hosts_HostNumberOfEntries() {
	local parm="InternetGatewayDevice.LANDevice.1.Hosts.HostNumberOfEntries"
	local leases_file
	local num_static_leases
	local num_dynamic_leases
	local permissions="0"
	local type="xsd:unsignedInt"
	local portvalue

	if [ -z "$default_dnsmasq_leases_file" ]; then
		leases_file="/var/dhcp.leases"
	else
		leases_file=$default_dnsmasq_leases_file
	fi

	case "$action" in
		get_value)
			get_device_hosts_number_of_leases "num_dhcp" "num_static_leases" "num_dynamic_leases"
			echo "num_dhcp: $num_dhcp, num_dynamic_leases: $num_dynamic_leases"
			# get_lan_hosts_wire_portstatus "portvalue" "pa" "pb"
			let local val=$num_static_leases+$num_dynamic_leases
			;;

		get_name)
			[ "$nl" = "1" ] && return $E_INVALID_ARGUMENTS
			;;

		get_notification)
			easycwmp_get_parameter_notification "val" "$parm"
			;;
	esac
	easycwmp_output "$parm" "$val" "$permissions" "$type"
}

get_lan_hosts_num() {
      local leases_file
      local num_static_leases
      local num_dynamic_leases

      if [ -z "$default_dnsmasq_leases_file" ]; then
         leases_file="/var/dhcp.leases"
      else
         leases_file=$default_dnsmasq_leases_file
      fi
     get_device_hosts_number_of_leases "num_dhcp" "num_static_leases" "num_dynamic_leases"
     let num_max=$num_static_leases+$num_dynamic_leases

     eval "export -- \"$1=\"\"$num_max\"\"\""
     eval "export -- \"$2=\"\"$num_dynamic_leases\"\"\""
}
